// source: stylekorean.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stylekorean.AddToCartRequest', null, global);
goog.exportSymbol('proto.stylekorean.AddToCartResponse', null, global);
goog.exportSymbol('proto.stylekorean.AddToOrderListRequest', null, global);
goog.exportSymbol('proto.stylekorean.AddToOrderListResponse', null, global);
goog.exportSymbol('proto.stylekorean.Brand', null, global);
goog.exportSymbol('proto.stylekorean.CompleteCartRequest', null, global);
goog.exportSymbol('proto.stylekorean.CompleteCartResponse', null, global);
goog.exportSymbol('proto.stylekorean.CompleteOrderListRequest', null, global);
goog.exportSymbol('proto.stylekorean.CompleteOrderListResponse', null, global);
goog.exportSymbol('proto.stylekorean.GetBrandsRequest', null, global);
goog.exportSymbol('proto.stylekorean.GetBrandsResponse', null, global);
goog.exportSymbol(
  'proto.stylekorean.GetProductFromBarcodeRequest',
  null,
  global,
);
goog.exportSymbol(
  'proto.stylekorean.GetProductFromBarcodeResponse',
  null,
  global,
);
goog.exportSymbol('proto.stylekorean.ListCurrentCartRequest', null, global);
goog.exportSymbol('proto.stylekorean.ListCurrentCartResponse', null, global);
goog.exportSymbol(
  'proto.stylekorean.ListCurrentOrderListRequest',
  null,
  global,
);
goog.exportSymbol(
  'proto.stylekorean.ListCurrentOrderListResponse',
  null,
  global,
);
goog.exportSymbol('proto.stylekorean.LoginRequest', null, global);
goog.exportSymbol('proto.stylekorean.LoginResponse', null, global);
goog.exportSymbol('proto.stylekorean.Paging', null, global);
goog.exportSymbol('proto.stylekorean.Product', null, global);
goog.exportSymbol('proto.stylekorean.ProductQuantity', null, global);
goog.exportSymbol('proto.stylekorean.ProductsByBrand', null, global);
goog.exportSymbol('proto.stylekorean.QueryProductsRequest', null, global);
goog.exportSymbol('proto.stylekorean.QueryProductsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.LoginRequest = function (opt_data) {
  jspb.Message;
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.LoginRequest.displayName = 'proto.stylekorean.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.LoginResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.LoginResponse.displayName =
    'proto.stylekorean.LoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.GetProductFromBarcodeRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.GetProductFromBarcodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.GetProductFromBarcodeRequest.displayName =
    'proto.stylekorean.GetProductFromBarcodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.GetProductFromBarcodeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.GetProductFromBarcodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.GetProductFromBarcodeResponse.displayName =
    'proto.stylekorean.GetProductFromBarcodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.AddToCartRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.AddToCartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.AddToCartRequest.displayName =
    'proto.stylekorean.AddToCartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.AddToCartResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.AddToCartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.AddToCartResponse.displayName =
    'proto.stylekorean.AddToCartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.AddToOrderListRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.AddToOrderListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.AddToOrderListRequest.displayName =
    'proto.stylekorean.AddToOrderListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.AddToOrderListResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.AddToOrderListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.AddToOrderListResponse.displayName =
    'proto.stylekorean.AddToOrderListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.ListCurrentCartRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.ListCurrentCartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.ListCurrentCartRequest.displayName =
    'proto.stylekorean.ListCurrentCartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.ListCurrentCartResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.stylekorean.ListCurrentCartResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.stylekorean.ListCurrentCartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.ListCurrentCartResponse.displayName =
    'proto.stylekorean.ListCurrentCartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.ListCurrentOrderListRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.ListCurrentOrderListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.ListCurrentOrderListRequest.displayName =
    'proto.stylekorean.ListCurrentOrderListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.ListCurrentOrderListResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.stylekorean.ListCurrentOrderListResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.stylekorean.ListCurrentOrderListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.ListCurrentOrderListResponse.displayName =
    'proto.stylekorean.ListCurrentOrderListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.GetBrandsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.GetBrandsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.GetBrandsRequest.displayName =
    'proto.stylekorean.GetBrandsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.GetBrandsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.stylekorean.GetBrandsResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.stylekorean.GetBrandsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.GetBrandsResponse.displayName =
    'proto.stylekorean.GetBrandsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.QueryProductsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.QueryProductsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.QueryProductsRequest.displayName =
    'proto.stylekorean.QueryProductsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.QueryProductsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.stylekorean.QueryProductsResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.stylekorean.QueryProductsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.QueryProductsResponse.displayName =
    'proto.stylekorean.QueryProductsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.CompleteCartRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.CompleteCartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.CompleteCartRequest.displayName =
    'proto.stylekorean.CompleteCartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.CompleteCartResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.CompleteCartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.CompleteCartResponse.displayName =
    'proto.stylekorean.CompleteCartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.CompleteOrderListRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.CompleteOrderListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.CompleteOrderListRequest.displayName =
    'proto.stylekorean.CompleteOrderListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.CompleteOrderListResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.CompleteOrderListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.CompleteOrderListResponse.displayName =
    'proto.stylekorean.CompleteOrderListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.Brand = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.Brand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.Brand.displayName = 'proto.stylekorean.Brand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.Product = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.Product.displayName = 'proto.stylekorean.Product';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.ProductsByBrand = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.stylekorean.ProductsByBrand.repeatedFields_,
    null,
  );
};
goog.inherits(proto.stylekorean.ProductsByBrand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.ProductsByBrand.displayName =
    'proto.stylekorean.ProductsByBrand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.ProductQuantity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.ProductQuantity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.ProductQuantity.displayName =
    'proto.stylekorean.ProductQuantity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stylekorean.Paging = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stylekorean.Paging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stylekorean.Paging.displayName = 'proto.stylekorean.Paging';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.LoginRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.LoginRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.LoginRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.LoginRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        username: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.LoginRequest}
 */
proto.stylekorean.LoginRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.LoginRequest();
  return proto.stylekorean.LoginRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.LoginRequest}
 */
proto.stylekorean.LoginRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.LoginRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.LoginRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.stylekorean.LoginRequest.prototype.getUsername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.LoginRequest} returns this
 */
proto.stylekorean.LoginRequest.prototype.setUsername = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.stylekorean.LoginRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.LoginRequest} returns this
 */
proto.stylekorean.LoginRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.LoginResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.LoginResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.LoginResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.LoginResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.LoginResponse}
 */
proto.stylekorean.LoginResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.LoginResponse();
  return proto.stylekorean.LoginResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.LoginResponse}
 */
proto.stylekorean.LoginResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.LoginResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.LoginResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.stylekorean.LoginResponse.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.LoginResponse} returns this
 */
proto.stylekorean.LoginResponse.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.GetProductFromBarcodeRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.GetProductFromBarcodeRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.GetProductFromBarcodeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.GetProductFromBarcodeRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        barcode: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.GetProductFromBarcodeRequest}
 */
proto.stylekorean.GetProductFromBarcodeRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.GetProductFromBarcodeRequest();
  return proto.stylekorean.GetProductFromBarcodeRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.GetProductFromBarcodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.GetProductFromBarcodeRequest}
 */
proto.stylekorean.GetProductFromBarcodeRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setBarcode(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.GetProductFromBarcodeRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.GetProductFromBarcodeRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.GetProductFromBarcodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.GetProductFromBarcodeRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getBarcode();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
  };

/**
 * optional string barcode = 1;
 * @return {string}
 */
proto.stylekorean.GetProductFromBarcodeRequest.prototype.getBarcode =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.stylekorean.GetProductFromBarcodeRequest} returns this
 */
proto.stylekorean.GetProductFromBarcodeRequest.prototype.setBarcode = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.GetProductFromBarcodeResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.stylekorean.GetProductFromBarcodeResponse.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.GetProductFromBarcodeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.GetProductFromBarcodeResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        product:
          (f = msg.getProduct()) &&
          proto.stylekorean.Product.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.GetProductFromBarcodeResponse}
 */
proto.stylekorean.GetProductFromBarcodeResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.GetProductFromBarcodeResponse();
  return proto.stylekorean.GetProductFromBarcodeResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.GetProductFromBarcodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.GetProductFromBarcodeResponse}
 */
proto.stylekorean.GetProductFromBarcodeResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.stylekorean.Product();
          reader.readMessage(
            value,
            proto.stylekorean.Product.deserializeBinaryFromReader,
          );
          msg.setProduct(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.GetProductFromBarcodeResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.GetProductFromBarcodeResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.GetProductFromBarcodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.GetProductFromBarcodeResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getProduct();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.stylekorean.Product.serializeBinaryToWriter,
      );
    }
  };

/**
 * optional Product product = 1;
 * @return {?proto.stylekorean.Product}
 */
proto.stylekorean.GetProductFromBarcodeResponse.prototype.getProduct =
  function () {
    return /** @type{?proto.stylekorean.Product} */ (
      jspb.Message.getWrapperField(this, proto.stylekorean.Product, 1)
    );
  };

/**
 * @param {?proto.stylekorean.Product|undefined} value
 * @return {!proto.stylekorean.GetProductFromBarcodeResponse} returns this
 */
proto.stylekorean.GetProductFromBarcodeResponse.prototype.setProduct =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.stylekorean.GetProductFromBarcodeResponse} returns this
 */
proto.stylekorean.GetProductFromBarcodeResponse.prototype.clearProduct =
  function () {
    return this.setProduct(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stylekorean.GetProductFromBarcodeResponse.prototype.hasProduct =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.AddToCartRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.AddToCartRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.AddToCartRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.AddToCartRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        productid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.AddToCartRequest}
 */
proto.stylekorean.AddToCartRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.AddToCartRequest();
  return proto.stylekorean.AddToCartRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.AddToCartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.AddToCartRequest}
 */
proto.stylekorean.AddToCartRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setProductid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setQuantity(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.AddToCartRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.AddToCartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.AddToCartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.AddToCartRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getProductid();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional uint64 productId = 1;
 * @return {number}
 */
proto.stylekorean.AddToCartRequest.prototype.getProductid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.AddToCartRequest} returns this
 */
proto.stylekorean.AddToCartRequest.prototype.setProductid = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.stylekorean.AddToCartRequest.prototype.getQuantity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.AddToCartRequest} returns this
 */
proto.stylekorean.AddToCartRequest.prototype.setQuantity = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.AddToCartResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.AddToCartResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.AddToCartResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.AddToCartResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.AddToCartResponse}
 */
proto.stylekorean.AddToCartResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.AddToCartResponse();
  return proto.stylekorean.AddToCartResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.AddToCartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.AddToCartResponse}
 */
proto.stylekorean.AddToCartResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.AddToCartResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.AddToCartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.AddToCartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.AddToCartResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.stylekorean.AddToCartResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.stylekorean.AddToCartResponse} returns this
 */
proto.stylekorean.AddToCartResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.AddToOrderListRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.AddToOrderListRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.AddToOrderListRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.AddToOrderListRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        productid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.AddToOrderListRequest}
 */
proto.stylekorean.AddToOrderListRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.AddToOrderListRequest();
  return proto.stylekorean.AddToOrderListRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.AddToOrderListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.AddToOrderListRequest}
 */
proto.stylekorean.AddToOrderListRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setProductid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setQuantity(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.AddToOrderListRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.AddToOrderListRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.AddToOrderListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.AddToOrderListRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getProductid();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional uint64 productId = 1;
 * @return {number}
 */
proto.stylekorean.AddToOrderListRequest.prototype.getProductid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.AddToOrderListRequest} returns this
 */
proto.stylekorean.AddToOrderListRequest.prototype.setProductid = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.stylekorean.AddToOrderListRequest.prototype.getQuantity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.AddToOrderListRequest} returns this
 */
proto.stylekorean.AddToOrderListRequest.prototype.setQuantity = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.AddToOrderListResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.AddToOrderListResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.AddToOrderListResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.AddToOrderListResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.AddToOrderListResponse}
 */
proto.stylekorean.AddToOrderListResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.AddToOrderListResponse();
  return proto.stylekorean.AddToOrderListResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.AddToOrderListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.AddToOrderListResponse}
 */
proto.stylekorean.AddToOrderListResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setSuccess(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.AddToOrderListResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.AddToOrderListResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.AddToOrderListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.AddToOrderListResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.stylekorean.AddToOrderListResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.stylekorean.AddToOrderListResponse} returns this
 */
proto.stylekorean.AddToOrderListResponse.prototype.setSuccess = function (
  value,
) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.ListCurrentCartRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.ListCurrentCartRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.ListCurrentCartRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.ListCurrentCartRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.ListCurrentCartRequest}
 */
proto.stylekorean.ListCurrentCartRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.ListCurrentCartRequest();
  return proto.stylekorean.ListCurrentCartRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.ListCurrentCartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.ListCurrentCartRequest}
 */
proto.stylekorean.ListCurrentCartRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.ListCurrentCartRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.ListCurrentCartRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.ListCurrentCartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.ListCurrentCartRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stylekorean.ListCurrentCartResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.ListCurrentCartResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.ListCurrentCartResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.ListCurrentCartResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.ListCurrentCartResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        productbrandsList: jspb.Message.toObjectList(
          msg.getProductbrandsList(),
          proto.stylekorean.ProductsByBrand.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.ListCurrentCartResponse}
 */
proto.stylekorean.ListCurrentCartResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.ListCurrentCartResponse();
  return proto.stylekorean.ListCurrentCartResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.ListCurrentCartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.ListCurrentCartResponse}
 */
proto.stylekorean.ListCurrentCartResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.stylekorean.ProductsByBrand();
          reader.readMessage(
            value,
            proto.stylekorean.ProductsByBrand.deserializeBinaryFromReader,
          );
          msg.addProductbrands(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.ListCurrentCartResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.ListCurrentCartResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.ListCurrentCartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.ListCurrentCartResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getProductbrandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.stylekorean.ProductsByBrand.serializeBinaryToWriter,
    );
  }
};

/**
 * repeated ProductsByBrand productBrands = 1;
 * @return {!Array<!proto.stylekorean.ProductsByBrand>}
 */
proto.stylekorean.ListCurrentCartResponse.prototype.getProductbrandsList =
  function () {
    return /** @type{!Array<!proto.stylekorean.ProductsByBrand>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.stylekorean.ProductsByBrand,
        1,
      )
    );
  };

/**
 * @param {!Array<!proto.stylekorean.ProductsByBrand>} value
 * @return {!proto.stylekorean.ListCurrentCartResponse} returns this
 */
proto.stylekorean.ListCurrentCartResponse.prototype.setProductbrandsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.stylekorean.ProductsByBrand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stylekorean.ProductsByBrand}
 */
proto.stylekorean.ListCurrentCartResponse.prototype.addProductbrands =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.stylekorean.ProductsByBrand,
      opt_index,
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stylekorean.ListCurrentCartResponse} returns this
 */
proto.stylekorean.ListCurrentCartResponse.prototype.clearProductbrandsList =
  function () {
    return this.setProductbrandsList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.ListCurrentOrderListRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.ListCurrentOrderListRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.ListCurrentOrderListRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.ListCurrentOrderListRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.ListCurrentOrderListRequest}
 */
proto.stylekorean.ListCurrentOrderListRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.ListCurrentOrderListRequest();
  return proto.stylekorean.ListCurrentOrderListRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.ListCurrentOrderListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.ListCurrentOrderListRequest}
 */
proto.stylekorean.ListCurrentOrderListRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.ListCurrentOrderListRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.ListCurrentOrderListRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.ListCurrentOrderListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.ListCurrentOrderListRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stylekorean.ListCurrentOrderListResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.ListCurrentOrderListResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.ListCurrentOrderListResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.ListCurrentOrderListResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.ListCurrentOrderListResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        productbrandsList: jspb.Message.toObjectList(
          msg.getProductbrandsList(),
          proto.stylekorean.ProductsByBrand.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.ListCurrentOrderListResponse}
 */
proto.stylekorean.ListCurrentOrderListResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.ListCurrentOrderListResponse();
  return proto.stylekorean.ListCurrentOrderListResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.ListCurrentOrderListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.ListCurrentOrderListResponse}
 */
proto.stylekorean.ListCurrentOrderListResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.stylekorean.ProductsByBrand();
          reader.readMessage(
            value,
            proto.stylekorean.ProductsByBrand.deserializeBinaryFromReader,
          );
          msg.addProductbrands(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.ListCurrentOrderListResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.ListCurrentOrderListResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.ListCurrentOrderListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.ListCurrentOrderListResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getProductbrandsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        proto.stylekorean.ProductsByBrand.serializeBinaryToWriter,
      );
    }
  };

/**
 * repeated ProductsByBrand productBrands = 1;
 * @return {!Array<!proto.stylekorean.ProductsByBrand>}
 */
proto.stylekorean.ListCurrentOrderListResponse.prototype.getProductbrandsList =
  function () {
    return /** @type{!Array<!proto.stylekorean.ProductsByBrand>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.stylekorean.ProductsByBrand,
        1,
      )
    );
  };

/**
 * @param {!Array<!proto.stylekorean.ProductsByBrand>} value
 * @return {!proto.stylekorean.ListCurrentOrderListResponse} returns this
 */
proto.stylekorean.ListCurrentOrderListResponse.prototype.setProductbrandsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.stylekorean.ProductsByBrand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stylekorean.ProductsByBrand}
 */
proto.stylekorean.ListCurrentOrderListResponse.prototype.addProductbrands =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.stylekorean.ProductsByBrand,
      opt_index,
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stylekorean.ListCurrentOrderListResponse} returns this
 */
proto.stylekorean.ListCurrentOrderListResponse.prototype.clearProductbrandsList =
  function () {
    return this.setProductbrandsList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.GetBrandsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.GetBrandsRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.GetBrandsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.GetBrandsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.GetBrandsRequest}
 */
proto.stylekorean.GetBrandsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.GetBrandsRequest();
  return proto.stylekorean.GetBrandsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.GetBrandsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.GetBrandsRequest}
 */
proto.stylekorean.GetBrandsRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.GetBrandsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.GetBrandsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.GetBrandsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.GetBrandsRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stylekorean.GetBrandsResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.GetBrandsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.GetBrandsResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.GetBrandsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.GetBrandsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        brandsList: jspb.Message.toObjectList(
          msg.getBrandsList(),
          proto.stylekorean.Brand.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.GetBrandsResponse}
 */
proto.stylekorean.GetBrandsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.GetBrandsResponse();
  return proto.stylekorean.GetBrandsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.GetBrandsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.GetBrandsResponse}
 */
proto.stylekorean.GetBrandsResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.stylekorean.Brand();
        reader.readMessage(
          value,
          proto.stylekorean.Brand.deserializeBinaryFromReader,
        );
        msg.addBrands(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.GetBrandsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.GetBrandsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.GetBrandsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.GetBrandsResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getBrandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.stylekorean.Brand.serializeBinaryToWriter,
    );
  }
};

/**
 * repeated Brand brands = 1;
 * @return {!Array<!proto.stylekorean.Brand>}
 */
proto.stylekorean.GetBrandsResponse.prototype.getBrandsList = function () {
  return /** @type{!Array<!proto.stylekorean.Brand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stylekorean.Brand, 1)
  );
};

/**
 * @param {!Array<!proto.stylekorean.Brand>} value
 * @return {!proto.stylekorean.GetBrandsResponse} returns this
 */
proto.stylekorean.GetBrandsResponse.prototype.setBrandsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.stylekorean.Brand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stylekorean.Brand}
 */
proto.stylekorean.GetBrandsResponse.prototype.addBrands = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.stylekorean.Brand,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stylekorean.GetBrandsResponse} returns this
 */
proto.stylekorean.GetBrandsResponse.prototype.clearBrandsList = function () {
  return this.setBrandsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.QueryProductsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.QueryProductsRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.QueryProductsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.QueryProductsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        query: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.QueryProductsRequest}
 */
proto.stylekorean.QueryProductsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.QueryProductsRequest();
  return proto.stylekorean.QueryProductsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.QueryProductsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.QueryProductsRequest}
 */
proto.stylekorean.QueryProductsRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setQuery(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.QueryProductsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.QueryProductsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.QueryProductsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.QueryProductsRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string query = 1;
 * @return {string}
 */
proto.stylekorean.QueryProductsRequest.prototype.getQuery = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.QueryProductsRequest} returns this
 */
proto.stylekorean.QueryProductsRequest.prototype.setQuery = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stylekorean.QueryProductsResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.QueryProductsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.QueryProductsResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.QueryProductsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.QueryProductsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        resultsList: jspb.Message.toObjectList(
          msg.getResultsList(),
          proto.stylekorean.Product.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.QueryProductsResponse}
 */
proto.stylekorean.QueryProductsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.QueryProductsResponse();
  return proto.stylekorean.QueryProductsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.QueryProductsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.QueryProductsResponse}
 */
proto.stylekorean.QueryProductsResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.stylekorean.Product();
        reader.readMessage(
          value,
          proto.stylekorean.Product.deserializeBinaryFromReader,
        );
        msg.addResults(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.QueryProductsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.QueryProductsResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.QueryProductsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.QueryProductsResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.stylekorean.Product.serializeBinaryToWriter,
    );
  }
};

/**
 * repeated Product results = 1;
 * @return {!Array<!proto.stylekorean.Product>}
 */
proto.stylekorean.QueryProductsResponse.prototype.getResultsList = function () {
  return /** @type{!Array<!proto.stylekorean.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stylekorean.Product, 1)
  );
};

/**
 * @param {!Array<!proto.stylekorean.Product>} value
 * @return {!proto.stylekorean.QueryProductsResponse} returns this
 */
proto.stylekorean.QueryProductsResponse.prototype.setResultsList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.stylekorean.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stylekorean.Product}
 */
proto.stylekorean.QueryProductsResponse.prototype.addResults = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.stylekorean.Product,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stylekorean.QueryProductsResponse} returns this
 */
proto.stylekorean.QueryProductsResponse.prototype.clearResultsList =
  function () {
    return this.setResultsList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.CompleteCartRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.CompleteCartRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.CompleteCartRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.CompleteCartRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.CompleteCartRequest}
 */
proto.stylekorean.CompleteCartRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.CompleteCartRequest();
  return proto.stylekorean.CompleteCartRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.CompleteCartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.CompleteCartRequest}
 */
proto.stylekorean.CompleteCartRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.CompleteCartRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.CompleteCartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.CompleteCartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.CompleteCartRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.CompleteCartResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.CompleteCartResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.CompleteCartResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.CompleteCartResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.CompleteCartResponse}
 */
proto.stylekorean.CompleteCartResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.CompleteCartResponse();
  return proto.stylekorean.CompleteCartResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.CompleteCartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.CompleteCartResponse}
 */
proto.stylekorean.CompleteCartResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.CompleteCartResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.CompleteCartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.CompleteCartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.CompleteCartResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.CompleteOrderListRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.CompleteOrderListRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.CompleteOrderListRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.CompleteOrderListRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.CompleteOrderListRequest}
 */
proto.stylekorean.CompleteOrderListRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.CompleteOrderListRequest();
  return proto.stylekorean.CompleteOrderListRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.CompleteOrderListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.CompleteOrderListRequest}
 */
proto.stylekorean.CompleteOrderListRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.CompleteOrderListRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.CompleteOrderListRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.CompleteOrderListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.CompleteOrderListRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.CompleteOrderListResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.CompleteOrderListResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.CompleteOrderListResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.CompleteOrderListResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.CompleteOrderListResponse}
 */
proto.stylekorean.CompleteOrderListResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.CompleteOrderListResponse();
  return proto.stylekorean.CompleteOrderListResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.CompleteOrderListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.CompleteOrderListResponse}
 */
proto.stylekorean.CompleteOrderListResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.CompleteOrderListResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.stylekorean.CompleteOrderListResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.CompleteOrderListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.CompleteOrderListResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.Brand.prototype.toObject = function (opt_includeInstance) {
    return proto.stylekorean.Brand.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.Brand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.Brand.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        code: jspb.Message.getFieldWithDefault(msg, 2, ''),
        name: jspb.Message.getFieldWithDefault(msg, 3, ''),
        included: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.Brand}
 */
proto.stylekorean.Brand.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.Brand();
  return proto.stylekorean.Brand.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.Brand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.Brand}
 */
proto.stylekorean.Brand.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCode(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIncluded(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.Brand.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.Brand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.Brand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.Brand.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getIncluded();
  if (f) {
    writer.writeBool(4, f);
  }
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.stylekorean.Brand.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.Brand} returns this
 */
proto.stylekorean.Brand.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string code = 2;
 * @return {string}
 */
proto.stylekorean.Brand.prototype.getCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Brand} returns this
 */
proto.stylekorean.Brand.prototype.setCode = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.stylekorean.Brand.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Brand} returns this
 */
proto.stylekorean.Brand.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool included = 4;
 * @return {boolean}
 */
proto.stylekorean.Brand.prototype.getIncluded = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 4, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.stylekorean.Brand} returns this
 */
proto.stylekorean.Brand.prototype.setIncluded = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.Product.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.Product.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.Product} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.Product.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        sku: jspb.Message.getFieldWithDefault(msg, 2, ''),
        salesname: jspb.Message.getFieldWithDefault(msg, 3, ''),
        suppliername: jspb.Message.getFieldWithDefault(msg, 4, ''),
        brandcode: jspb.Message.getFieldWithDefault(msg, 5, ''),
        latestprice: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
        lateststock: jspb.Message.getFieldWithDefault(msg, 7, 0),
        barcode: jspb.Message.getFieldWithDefault(msg, 8, ''),
        thumbnailurl: jspb.Message.getFieldWithDefault(msg, 9, ''),
        brandname: jspb.Message.getFieldWithDefault(msg, 10, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.Product}
 */
proto.stylekorean.Product.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.Product();
  return proto.stylekorean.Product.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.Product}
 */
proto.stylekorean.Product.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSku(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setSalesname(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setSuppliername(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setBrandcode(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLatestprice(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setLateststock(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setBarcode(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setThumbnailurl(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setBrandname(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.Product.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.Product.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getSku();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getSalesname();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getSuppliername();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getBrandcode();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getLatestprice();
  if (f !== 0.0) {
    writer.writeDouble(6, f);
  }
  f = message.getLateststock();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getBarcode();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getThumbnailurl();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getBrandname();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.stylekorean.Product.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string sku = 2;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getSku = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setSku = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string salesName = 3;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getSalesname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setSalesname = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string supplierName = 4;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getSuppliername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setSuppliername = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string brandCode = 5;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getBrandcode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setBrandcode = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional double latestPrice = 6;
 * @return {number}
 */
proto.stylekorean.Product.prototype.getLatestprice = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setLatestprice = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * optional uint64 latestStock = 7;
 * @return {number}
 */
proto.stylekorean.Product.prototype.getLateststock = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setLateststock = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional string barcode = 8;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getBarcode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setBarcode = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * optional string thumbnailUrl = 9;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getThumbnailurl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setThumbnailurl = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional string brandName = 10;
 * @return {string}
 */
proto.stylekorean.Product.prototype.getBrandname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.Product} returns this
 */
proto.stylekorean.Product.prototype.setBrandname = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stylekorean.ProductsByBrand.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.ProductsByBrand.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.ProductsByBrand.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.ProductsByBrand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.ProductsByBrand.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        brandname: jspb.Message.getFieldWithDefault(msg, 1, ''),
        productquantitiesList: jspb.Message.toObjectList(
          msg.getProductquantitiesList(),
          proto.stylekorean.ProductQuantity.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.ProductsByBrand}
 */
proto.stylekorean.ProductsByBrand.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.ProductsByBrand();
  return proto.stylekorean.ProductsByBrand.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.ProductsByBrand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.ProductsByBrand}
 */
proto.stylekorean.ProductsByBrand.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setBrandname(value);
        break;
      case 2:
        var value = new proto.stylekorean.ProductQuantity();
        reader.readMessage(
          value,
          proto.stylekorean.ProductQuantity.deserializeBinaryFromReader,
        );
        msg.addProductquantities(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.ProductsByBrand.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.ProductsByBrand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.ProductsByBrand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.ProductsByBrand.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getBrandname();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getProductquantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.stylekorean.ProductQuantity.serializeBinaryToWriter,
    );
  }
};

/**
 * optional string brandName = 1;
 * @return {string}
 */
proto.stylekorean.ProductsByBrand.prototype.getBrandname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.stylekorean.ProductsByBrand} returns this
 */
proto.stylekorean.ProductsByBrand.prototype.setBrandname = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated ProductQuantity productQuantities = 2;
 * @return {!Array<!proto.stylekorean.ProductQuantity>}
 */
proto.stylekorean.ProductsByBrand.prototype.getProductquantitiesList =
  function () {
    return /** @type{!Array<!proto.stylekorean.ProductQuantity>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.stylekorean.ProductQuantity,
        2,
      )
    );
  };

/**
 * @param {!Array<!proto.stylekorean.ProductQuantity>} value
 * @return {!proto.stylekorean.ProductsByBrand} returns this
 */
proto.stylekorean.ProductsByBrand.prototype.setProductquantitiesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
  };

/**
 * @param {!proto.stylekorean.ProductQuantity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stylekorean.ProductQuantity}
 */
proto.stylekorean.ProductsByBrand.prototype.addProductquantities = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.stylekorean.ProductQuantity,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stylekorean.ProductsByBrand} returns this
 */
proto.stylekorean.ProductsByBrand.prototype.clearProductquantitiesList =
  function () {
    return this.setProductquantitiesList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.ProductQuantity.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.stylekorean.ProductQuantity.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.ProductQuantity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.ProductQuantity.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        product:
          (f = msg.getProduct()) &&
          proto.stylekorean.Product.toObject(includeInstance, f),
        quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.ProductQuantity}
 */
proto.stylekorean.ProductQuantity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.ProductQuantity();
  return proto.stylekorean.ProductQuantity.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.ProductQuantity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.ProductQuantity}
 */
proto.stylekorean.ProductQuantity.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.stylekorean.Product();
        reader.readMessage(
          value,
          proto.stylekorean.Product.deserializeBinaryFromReader,
        );
        msg.setProduct(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setQuantity(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.ProductQuantity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.ProductQuantity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.ProductQuantity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.ProductQuantity.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.stylekorean.Product.serializeBinaryToWriter,
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional Product product = 1;
 * @return {?proto.stylekorean.Product}
 */
proto.stylekorean.ProductQuantity.prototype.getProduct = function () {
  return /** @type{?proto.stylekorean.Product} */ (
    jspb.Message.getWrapperField(this, proto.stylekorean.Product, 1)
  );
};

/**
 * @param {?proto.stylekorean.Product|undefined} value
 * @return {!proto.stylekorean.ProductQuantity} returns this
 */
proto.stylekorean.ProductQuantity.prototype.setProduct = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.stylekorean.ProductQuantity} returns this
 */
proto.stylekorean.ProductQuantity.prototype.clearProduct = function () {
  return this.setProduct(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stylekorean.ProductQuantity.prototype.hasProduct = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.stylekorean.ProductQuantity.prototype.getQuantity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.ProductQuantity} returns this
 */
proto.stylekorean.ProductQuantity.prototype.setQuantity = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.stylekorean.Paging.prototype.toObject = function (opt_includeInstance) {
    return proto.stylekorean.Paging.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.stylekorean.Paging} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.stylekorean.Paging.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        totalresults: jspb.Message.getFieldWithDefault(msg, 1, 0),
        last: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stylekorean.Paging}
 */
proto.stylekorean.Paging.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stylekorean.Paging();
  return proto.stylekorean.Paging.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stylekorean.Paging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stylekorean.Paging}
 */
proto.stylekorean.Paging.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalresults(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setLast(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stylekorean.Paging.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.stylekorean.Paging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stylekorean.Paging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stylekorean.Paging.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTotalresults();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getLast();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional uint64 totalResults = 1;
 * @return {number}
 */
proto.stylekorean.Paging.prototype.getTotalresults = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.Paging} returns this
 */
proto.stylekorean.Paging.prototype.setTotalresults = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 last = 2;
 * @return {number}
 */
proto.stylekorean.Paging.prototype.getLast = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.stylekorean.Paging} returns this
 */
proto.stylekorean.Paging.prototype.setLast = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

goog.object.extend(exports, proto.stylekorean);
